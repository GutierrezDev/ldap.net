using System;
using System.IO;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Xunit;
using zivillian.ldap.Asn1;

namespace zivillian.ldap.test
{
    public class DeserializerTests
    {
        [Fact]
        public void CanReadDeleteRequest()
        {
            var data = new byte[]
            {
                0x30, 0x84, 0x00, 0x00, 0x00, 0x22, 0x02, 0x01,
                0x2a, 0x4a, 0x1d, 0x6f, 0x75, 0x3d, 0x63, 0x68,
                0x65, 0x6d, 0x69, 0x73, 0x74, 0x73, 0x2c, 0x64,
                0x63, 0x3d, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
                0x65, 0x2c, 0x64, 0x63, 0x3d, 0x63, 0x6f, 0x6d
            };
            var message = Read(data, false);
            Assert.Equal(42, message.Id);
            var delete = Assert.IsType<LdapDeleteRequest>(message);
            Assert.Equal("ou=chemists,dc=example,dc=com", delete.DN.ToString());
            Assert.Empty(message.Controls);
        }

        [Fact]
        public void CanReadBindRequest()
        {
            var data = new byte[]
            {
                0x30, 0x84, 0x00, 0x00, 0x00, 0x3c, 0x02, 0x01,
                0x1b, 0x60, 0x84, 0x00, 0x00, 0x00, 0x33, 0x02,
                0x01, 0x03, 0x04, 0x24, 0x63, 0x6e, 0x3d, 0x72,
                0x65, 0x61, 0x64, 0x2d, 0x6f, 0x6e, 0x6c, 0x79,
                0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2c, 0x64,
                0x63, 0x3d, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
                0x65, 0x2c, 0x64, 0x63, 0x3d, 0x63, 0x6f, 0x6d,
                0x80, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
                0x72, 0x64
            };
            var message = Read(data, false);
            Assert.Equal(27, message.Id);
            var bind = Assert.IsType<LdapBindRequest>(message);
            Assert.Equal(3, bind.Version);
            Assert.Equal("cn=read-only-admin,dc=example,dc=com", bind.Name.ToString());
            Assert.Equal("password", Encoding.UTF8.GetString(bind.Simple.Value.Span));
            Assert.Null(bind.SaslMechanism);
            Assert.Null(bind.SaslCredentials);
            Assert.Empty(bind.Controls);
        }

        [Fact]
        public void CanReadBindResponse()
        {
            var data = new byte[]
            {
                0x30, 0x0c, 0x02, 0x01, 0x1b, 0x61, 0x07, 0x0a,
                0x01, 0x00, 0x04, 0x00, 0x04, 0x00
            };
            var message = Read(data);
            Assert.Equal(27, message.Id);
            var bind = Assert.IsType<LdapBindResponse>(message);
            Assert.Equal(ResultCode.Success, bind.ResultCode);
            Assert.Empty(bind.MatchedDN.ToString());
            Assert.Empty(bind.DiagnosticMessage);
            Assert.Empty(bind.Controls);
            Assert.Empty(bind.Referrals);
        }

        [Fact]
        public void CanReadSearchRequest()
        {
            var data = new byte[]
            {
                0x30, 0x84, 0x00, 0x00, 0x01, 0x58, 0x02, 0x01,
                0x1c, 0x63, 0x84, 0x00, 0x00, 0x01, 0x4f, 0x04,
                0x00, 0x0a, 0x01, 0x00, 0x0a, 0x01, 0x00, 0x02,
                0x01, 0x00, 0x02, 0x01, 0x00, 0x01, 0x01, 0x00,
                0x87, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
                0x63, 0x6c, 0x61, 0x73, 0x73, 0x30, 0x84, 0x00,
                0x00, 0x01, 0x2b, 0x04, 0x11, 0x73, 0x75, 0x62,
                0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x75,
                0x62, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x04, 0x0d,
                0x64, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
                0x65, 0x4e, 0x61, 0x6d, 0x65, 0x04, 0x0e, 0x6e,
                0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
                0x74, 0x65, 0x78, 0x74, 0x73, 0x04, 0x14, 0x64,
                0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x61,
                0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74,
                0x65, 0x78, 0x74, 0x04, 0x13, 0x73, 0x63, 0x68,
                0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x69, 0x6e,
                0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
                0x04, 0x1a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
                0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
                0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
                0x74, 0x65, 0x78, 0x74, 0x04, 0x17, 0x72, 0x6f,
                0x6f, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
                0x4e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f,
                0x6e, 0x74, 0x65, 0x78, 0x74, 0x04, 0x10, 0x73,
                0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
                0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x04,
                0x14, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
                0x65, 0x64, 0x4c, 0x44, 0x41, 0x50, 0x56, 0x65,
                0x72, 0x73, 0x69, 0x6f, 0x6e, 0x04, 0x15, 0x73,
                0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
                0x4c, 0x44, 0x41, 0x50, 0x50, 0x6f, 0x6c, 0x69,
                0x63, 0x69, 0x65, 0x73, 0x04, 0x17, 0x73, 0x75,
                0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53,
                0x41, 0x53, 0x4c, 0x4d, 0x65, 0x63, 0x68, 0x61,
                0x6e, 0x69, 0x73, 0x6d, 0x73, 0x04, 0x0b, 0x64,
                0x6e, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61,
                0x6d, 0x65, 0x04, 0x0f, 0x6c, 0x64, 0x61, 0x70,
                0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
                0x61, 0x6d, 0x65, 0x04, 0x0a, 0x73, 0x65, 0x72,
                0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x04,
                0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
                0x65, 0x64, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
                0x6c, 0x69, 0x74, 0x69, 0x65, 0x73
            };
            var message = Read(data, false);
            Assert.Equal(28, message.Id);
            var search = Assert.IsType<LdapSearchRequest>(message);
            Assert.True(String.IsNullOrEmpty(search.BaseObject.ToString()));
            Assert.Equal(SearchScope.BaseObject, search.Scope);
            Assert.Equal(DerefAliases.NeverDerefAliases, search.DerefAliases);
            Assert.Equal(Int32.MaxValue, search.SizeLimit);
            Assert.Equal(TimeSpan.MaxValue, search.TimeLimit);
            Assert.False(search.TypesOnly);
            var filter = Assert.IsType<LdapPresentFilter>(search.Filter);
            Assert.Equal("objectclass", filter.Attribute.ToString());
            Assert.Equal(15, search.Attributes.Length);
            Assert.Equal("subschemaSubentry", search.Attributes[0]);
            Assert.Equal("dsServiceName", search.Attributes[1]);
            Assert.Equal("namingContexts", search.Attributes[2]);
            Assert.Equal("defaultNamingContext", search.Attributes[3]);
            Assert.Equal("schemaNamingContext", search.Attributes[4]);
            Assert.Equal("configurationNamingContext", search.Attributes[5]);
            Assert.Equal("rootDomainNamingContext", search.Attributes[6]);
            Assert.Equal("supportedControl", search.Attributes[7]);
            Assert.Equal("supportedLDAPVersion", search.Attributes[8]);
            Assert.Equal("supportedLDAPPolicies", search.Attributes[9]);
            Assert.Equal("supportedSASLMechanisms", search.Attributes[10]);
            Assert.Equal("dnsHostName", search.Attributes[11]);
            Assert.Equal("ldapServiceName", search.Attributes[12]);
            Assert.Equal("serverName", search.Attributes[13]);
            Assert.Equal("supportedCapabilities", search.Attributes[14]);
            Assert.Empty(search.Controls);
        }

        [Fact]
        public void CanReadSearchRequest2()
        {
            var data = new byte[]
            {
                0x30, 0x84, 0x00, 0x00, 0x00, 0x7f, 0x02, 0x01,
                0x1e, 0x63, 0x84, 0x00, 0x00, 0x00, 0x42, 0x04,
                0x11, 0x64, 0x63, 0x3d, 0x65, 0x78, 0x61, 0x6d,
                0x70, 0x6c, 0x65, 0x2c, 0x64, 0x63, 0x3d, 0x63,
                0x6f, 0x6d, 0x0a, 0x01, 0x01, 0x0a, 0x01, 0x00,
                0x02, 0x01, 0x00, 0x02, 0x01, 0x3c, 0x01, 0x01,
                0x00, 0x87, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63,
                0x74, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x30, 0x84,
                0x00, 0x00, 0x00, 0x0d, 0x04, 0x0b, 0x6f, 0x62,
                0x6a, 0x65, 0x63, 0x74, 0x63, 0x6c, 0x61, 0x73,
                0x73, 0xa0, 0x84, 0x00, 0x00, 0x00, 0x2e, 0x30,
                0x84, 0x00, 0x00, 0x00, 0x28, 0x04, 0x16, 0x31,
                0x2e, 0x32, 0x2e, 0x38, 0x34, 0x30, 0x2e, 0x31,
                0x31, 0x33, 0x35, 0x35, 0x36, 0x2e, 0x31, 0x2e,
                0x34, 0x2e, 0x33, 0x31, 0x39, 0x01, 0x01, 0xff,
                0x04, 0x0b, 0x30, 0x84, 0x00, 0x00, 0x00, 0x05,
                0x02, 0x01, 0x64, 0x04, 0x00
            };
            var message = Read(data, false);
            Assert.Equal(30, message.Id);
            var search = Assert.IsType<LdapSearchRequest>(message);
            Assert.Equal("dc=example,dc=com", search.BaseObject.ToString());
            Assert.Equal(SearchScope.SingleLevel, search.Scope);
            Assert.Equal(DerefAliases.NeverDerefAliases, search.DerefAliases);
            Assert.Equal(Int32.MaxValue, search.SizeLimit);
            Assert.Equal(TimeSpan.FromSeconds(60), search.TimeLimit);
            Assert.False(search.TypesOnly);

            var control = Assert.Single(message.Controls);
            Assert.Equal("1.2.840.113556.1.4.319", control.Oid);
            Assert.True(control.Criticality);
            Assert.False(control.Value.Value.IsEmpty);
        }

        [Fact]
        public void CanReadUnbindRequest()
        {
            var data = new byte[]
            {
                0x30, 0x84, 0x00, 0x00, 0x00, 0x05, 0x02, 0x01,
                0x28, 0x42, 0x00
            };
            var message = Read(data, false);
            Assert.Equal(40, message.Id);
            var unbind = Assert.IsType<LdapUnbindRequest>(message);
            Assert.Empty(unbind.Controls);
        }

        [Fact]
        public void CanReadSearchResEntry()
        {
            var data = new byte[]
            {
                0x30, 0x82, 0x01, 0x39, 0x02, 0x01, 0x1c, 0x64,
                0x82, 0x01, 0x32, 0x04, 0x00, 0x30, 0x82, 0x01,
                0x2c, 0x30, 0x25, 0x04, 0x0e, 0x6e, 0x61, 0x6d,
                0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65,
                0x78, 0x74, 0x73, 0x31, 0x13, 0x04, 0x11, 0x64,
                0x63, 0x3d, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
                0x65, 0x2c, 0x64, 0x63, 0x3d, 0x63, 0x6f, 0x6d,
                0x30, 0x81, 0xc0, 0x04, 0x10, 0x73, 0x75, 0x70,
                0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f,
                0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x31, 0x81, 0xab,
                0x04, 0x18, 0x32, 0x2e, 0x31, 0x36, 0x2e, 0x38,
                0x34, 0x30, 0x2e, 0x31, 0x2e, 0x31, 0x31, 0x33,
                0x37, 0x33, 0x30, 0x2e, 0x33, 0x2e, 0x34, 0x2e,
                0x31, 0x38, 0x04, 0x17, 0x32, 0x2e, 0x31, 0x36,
                0x2e, 0x38, 0x34, 0x30, 0x2e, 0x31, 0x2e, 0x31,
                0x31, 0x33, 0x37, 0x33, 0x30, 0x2e, 0x33, 0x2e,
                0x34, 0x2e, 0x32, 0x04, 0x17, 0x31, 0x2e, 0x33,
                0x2e, 0x36, 0x2e, 0x31, 0x2e, 0x34, 0x2e, 0x31,
                0x2e, 0x34, 0x32, 0x30, 0x33, 0x2e, 0x31, 0x2e,
                0x31, 0x30, 0x2e, 0x31, 0x04, 0x16, 0x31, 0x2e,
                0x32, 0x2e, 0x38, 0x34, 0x30, 0x2e, 0x31, 0x31,
                0x33, 0x35, 0x35, 0x36, 0x2e, 0x31, 0x2e, 0x34,
                0x2e, 0x33, 0x31, 0x39, 0x04, 0x17, 0x31, 0x2e,
                0x32, 0x2e, 0x38, 0x32, 0x36, 0x2e, 0x30, 0x2e,
                0x31, 0x2e, 0x33, 0x33, 0x34, 0x34, 0x38, 0x31,
                0x30, 0x2e, 0x32, 0x2e, 0x33, 0x04, 0x0e, 0x31,
                0x2e, 0x33, 0x2e, 0x36, 0x2e, 0x31, 0x2e, 0x31,
                0x2e, 0x31, 0x33, 0x2e, 0x32, 0x04, 0x0e, 0x31,
                0x2e, 0x33, 0x2e, 0x36, 0x2e, 0x31, 0x2e, 0x31,
                0x2e, 0x31, 0x33, 0x2e, 0x31, 0x04, 0x0c, 0x31,
                0x2e, 0x33, 0x2e, 0x36, 0x2e, 0x31, 0x2e, 0x31,
                0x2e, 0x31, 0x32, 0x30, 0x1b, 0x04, 0x14, 0x73,
                0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
                0x4c, 0x44, 0x41, 0x50, 0x56, 0x65, 0x72, 0x73,
                0x69, 0x6f, 0x6e, 0x31, 0x03, 0x04, 0x01, 0x33,
                0x30, 0x23, 0x04, 0x11, 0x73, 0x75, 0x62, 0x73,
                0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x75, 0x62,
                0x65, 0x6e, 0x74, 0x72, 0x79, 0x31, 0x0e, 0x04,
                0x0c, 0x63, 0x6e, 0x3d, 0x53, 0x75, 0x62, 0x73,
                0x63, 0x68, 0x65, 0x6d, 0x61
            };
            var message = Read(data);
            Assert.Equal(28, message.Id);
            var result = Assert.IsType<LdapSearchResultEntry>(message);
            Assert.Equal(String.Empty, result.ObjectName);
            Assert.Equal(4, result.Attributes.Length);
            
            var attr = result.Attributes[0];
            Assert.Equal("namingContexts", attr.Type.ToString());
            var value = Assert.Single(attr.Values);
            Assert.Equal("dc=example,dc=com", value);
            
            attr = result.Attributes[1];
            Assert.Equal("supportedControl", attr.Type.ToString());
            Assert.Equal(8, attr.Values.Length);
            Assert.Equal("2.16.840.1.113730.3.4.18", attr.Values[0]);
            Assert.Equal("2.16.840.1.113730.3.4.2", attr.Values[1]);
            Assert.Equal("1.3.6.1.4.1.4203.1.10.1", attr.Values[2]);
            Assert.Equal("1.2.840.113556.1.4.319", attr.Values[3]);
            Assert.Equal("1.2.826.0.1.3344810.2.3", attr.Values[4]);
            Assert.Equal("1.3.6.1.1.13.2", attr.Values[5]);
            Assert.Equal("1.3.6.1.1.13.1", attr.Values[6]);
            Assert.Equal("1.3.6.1.1.12", attr.Values[7]);
            
            attr = result.Attributes[2];
            Assert.Equal("supportedLDAPVersion", attr.Type.ToString());
            value = Assert.Single(attr.Values);
            Assert.Equal("3", value);
            
            attr = result.Attributes[3];
            Assert.Equal("subschemaSubentry", attr.Type.ToString());
            value = Assert.Single(attr.Values);
            Assert.Equal("cn=Subschema", value);

            Assert.Empty(result.Controls);
        }

        [Fact]
        public void CanReadSearchResultDone()
        {
            var data = new byte[]
            {
                0x30, 0x0c, 0x02, 0x01, 0x1c, 0x65, 0x07, 0x0a,
                0x01, 0x00, 0x04, 0x00, 0x04, 0x00
            };
            var message = Read(data);
            Assert.Equal(28, message.Id);
            var done = Assert.IsType<LdapSearchResultDone>(message);
            Assert.Equal(ResultCode.Success, done.ResultCode);
            Assert.Equal(String.Empty, done.MatchedDN.ToString());
            Assert.Equal(String.Empty, done.DiagnosticMessage);
            Assert.Empty(done.Referrals);
            Assert.Empty(done.Controls);
        }

        [Fact]
        public void CanReadDeleteResponse()
        {
            var data = new byte[]
            {
                0x30, 0x25, 0x02, 0x01, 0x2a, 0x6b, 0x20, 0x0a,
                0x01, 0x32, 0x04, 0x00, 0x04, 0x19, 0x6e, 0x6f,
                0x20, 0x77, 0x72, 0x69, 0x74, 0x65, 0x20, 0x61,
                0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f,
                0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74
            };
            var message = Read(data);
            Assert.Equal(42, message.Id);
            var del = Assert.IsType<LdapDeleteResponse>(message);
            Assert.Equal(ResultCode.InsufficientAccessRights, del.ResultCode);
            Assert.Equal(String.Empty, del.MatchedDN.ToString());
            Assert.Equal("no write access to parent", del.DiagnosticMessage);
            Assert.Empty(del.Referrals);
            Assert.Empty(del.Controls);
        }

        [Fact]
        public void CanReadModifyRequest()
        {
            var data = new byte[]
            {
                0x30, 0x84, 0x00, 0x00, 0x00, 0x84, 0x02, 0x01,
                0x0c, 0x66, 0x84, 0x00, 0x00, 0x00, 0x7b, 0x04,
                0x1d, 0x6f, 0x75, 0x3d, 0x63, 0x68, 0x65, 0x6d,
                0x69, 0x73, 0x74, 0x73, 0x2c, 0x64, 0x63, 0x3d,
                0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2c,
                0x64, 0x63, 0x3d, 0x63, 0x6f, 0x6d, 0x30, 0x84,
                0x00, 0x00, 0x00, 0x56, 0x30, 0x84, 0x00, 0x00,
                0x00, 0x26, 0x0a, 0x01, 0x00, 0x30, 0x84, 0x00,
                0x00, 0x00, 0x1d, 0x04, 0x10, 0x62, 0x75, 0x73,
                0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x61, 0x74,
                0x65, 0x67, 0x6f, 0x72, 0x79, 0x31, 0x84, 0x00,
                0x00, 0x00, 0x05, 0x04, 0x03, 0x42, 0x61, 0x7a,
                0x30, 0x84, 0x00, 0x00, 0x00, 0x24, 0x0a, 0x01,
                0x00, 0x30, 0x84, 0x00, 0x00, 0x00, 0x1b, 0x04,
                0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
                0x74, 0x69, 0x6f, 0x6e, 0x31, 0x84, 0x00, 0x00,
                0x00, 0x08, 0x04, 0x06, 0x46, 0x6f, 0x6f, 0x62,
                0x61, 0x72
            };
            var message = Read(data, false);
            Assert.Equal(12, message.Id);
            Assert.Empty(message.Controls);
            var modify = Assert.IsType<LdapModifyRequest>(message);
            Assert.Equal("ou=chemists,dc=example,dc=com", modify.Object.ToString());
            Assert.Equal(2, modify.Changes.Length);
            Assert.Equal(ChangeOperation.Add, modify.Changes[0].Operation);
            Assert.Equal("businessCategory", modify.Changes[0].Modification.Type.ToString());
            var value = Assert.Single(modify.Changes[0].Modification.Values);
            Assert.Equal("Baz", value);
            Assert.Equal(ChangeOperation.Add, modify.Changes[1].Operation);
            Assert.Equal("description", modify.Changes[1].Modification.Type.ToString());
            value = Assert.Single(modify.Changes[1].Modification.Values);
            Assert.Equal("Foobar", value);
        }

        [Fact]
        public void CanReadModifyResponse()
        {
            var data = new byte[]
            {
                0x30, 0x0c, 0x02, 0x01, 0x0c, 0x67, 0x07, 0x0a,
                0x01, 0x32, 0x04, 0x00, 0x04, 0x00
            };
            var message = Read(data);
            Assert.Equal(12, message.Id);
            Assert.Empty(message.Controls);
            var modify = Assert.IsType<LdapModifyResponse>(message);
            Assert.Equal(ResultCode.InsufficientAccessRights, modify.ResultCode);
            Assert.Equal(String.Empty, modify.MatchedDN.ToString());
            Assert.Equal(String.Empty, modify.DiagnosticMessage);
            Assert.Empty(modify.Referrals);
        }

        [Fact]
        public void CanReadAddRequest()
        {
            var data = new byte[]
            {
                0x30, 0x84, 0x00, 0x00, 0x01, 0x2f, 0x02, 0x01,
                0x0f, 0x68, 0x84, 0x00, 0x00, 0x01, 0x26, 0x04,
                0x1f, 0x75, 0x69, 0x64, 0x3d, 0x74, 0x65, 0x73,
                0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2c, 0x64,
                0x63, 0x3d, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
                0x65, 0x2c, 0x64, 0x63, 0x3d, 0x63, 0x6f, 0x6d,
                0x30, 0x84, 0x00, 0x00, 0x00, 0xff, 0x30, 0x84,
                0x00, 0x00, 0x00, 0x35, 0x04, 0x0b, 0x6f, 0x62,
                0x6a, 0x65, 0x63, 0x74, 0x63, 0x6c, 0x61, 0x73,
                0x73, 0x31, 0x84, 0x00, 0x00, 0x00, 0x22, 0x04,
                0x0c, 0x70, 0x6f, 0x73, 0x69, 0x78, 0x41, 0x63,
                0x63, 0x6f, 0x75, 0x6e, 0x74, 0x04, 0x03, 0x74,
                0x6f, 0x70, 0x04, 0x0d, 0x69, 0x6e, 0x65, 0x74,
                0x4f, 0x72, 0x67, 0x50, 0x65, 0x72, 0x73, 0x6f,
                0x6e, 0x30, 0x84, 0x00, 0x00, 0x00, 0x14, 0x04,
                0x09, 0x67, 0x69, 0x64, 0x4e, 0x75, 0x6d, 0x62,
                0x65, 0x72, 0x31, 0x84, 0x00, 0x00, 0x00, 0x03,
                0x04, 0x01, 0x30, 0x30, 0x84, 0x00, 0x00, 0x00,
                0x17, 0x04, 0x09, 0x67, 0x69, 0x76, 0x65, 0x6e,
                0x4e, 0x61, 0x6d, 0x65, 0x31, 0x84, 0x00, 0x00,
                0x00, 0x06, 0x04, 0x04, 0x54, 0x65, 0x73, 0x74,
                0x30, 0x84, 0x00, 0x00, 0x00, 0x10, 0x04, 0x02,
                0x73, 0x6e, 0x31, 0x84, 0x00, 0x00, 0x00, 0x06,
                0x04, 0x04, 0x55, 0x73, 0x65, 0x72, 0x30, 0x84,
                0x00, 0x00, 0x00, 0x16, 0x04, 0x03, 0x75, 0x69,
                0x64, 0x31, 0x84, 0x00, 0x00, 0x00, 0x0b, 0x04,
                0x09, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x75, 0x73,
                0x65, 0x72, 0x30, 0x84, 0x00, 0x00, 0x00, 0x1c,
                0x04, 0x0d, 0x68, 0x6f, 0x6d, 0x65, 0x44, 0x69,
                0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x31,
                0x84, 0x00, 0x00, 0x00, 0x07, 0x04, 0x05, 0x65,
                0x6d, 0x70, 0x74, 0x79, 0x30, 0x84, 0x00, 0x00,
                0x00, 0x15, 0x04, 0x02, 0x43, 0x6e, 0x31, 0x84,
                0x00, 0x00, 0x00, 0x0b, 0x04, 0x09, 0x74, 0x65,
                0x73, 0x74, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x30,
                0x84, 0x00, 0x00, 0x00, 0x18, 0x04, 0x09, 0x75,
                0x69, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
                0x31, 0x84, 0x00, 0x00, 0x00, 0x07, 0x04, 0x05,
                0x36, 0x31, 0x38, 0x37, 0x36
            };
            var message = Read(data, false);
            Assert.Equal(15, message.Id);
            Assert.Empty(message.Controls);
            var add = Assert.IsType<LdapAddRequest>(message);
            Assert.Equal("uid=test.user,dc=example,dc=com", add.Entry.ToString());
            Assert.Equal(8, add.Attributes.Length);
            Assert.Equal("objectclass", add.Attributes[0].Type.ToString());
            Assert.Equal(new []{"posixAccount", "top", "inetOrgPerson"}, add.Attributes[0].Values);
            Assert.Equal("gidNumber", add.Attributes[1].Type.ToString());
            Assert.Equal(new []{"0"}, add.Attributes[1].Values);
            Assert.Equal("givenName", add.Attributes[2].Type.ToString());
            Assert.Equal(new []{"Test"}, add.Attributes[2].Values);
            Assert.Equal("sn", add.Attributes[3].Type.ToString());
            Assert.Equal(new []{"User"}, add.Attributes[3].Values);
            Assert.Equal("uid", add.Attributes[4].Type.ToString());
            Assert.Equal(new []{"test.user"}, add.Attributes[4].Values);
            Assert.Equal("homeDirectory", add.Attributes[5].Type.ToString());
            Assert.Equal(new []{"empty"}, add.Attributes[5].Values);
            Assert.Equal("Cn", add.Attributes[6].Type.ToString());
            Assert.Equal(new []{"test.user"}, add.Attributes[6].Values);
            Assert.Equal("uidNumber", add.Attributes[7].Type.ToString());
            Assert.Equal(new []{"61876"}, add.Attributes[7].Values);
        }

        [Fact]
        public void CanReadAddResponse()
        {
            var data = new byte[]
            {
                0x30, 0x25, 0x02, 0x01, 0x0f, 0x69, 0x20, 0x0a,
                0x01, 0x32, 0x04, 0x00, 0x04, 0x19, 0x6e, 0x6f,
                0x20, 0x77, 0x72, 0x69, 0x74, 0x65, 0x20, 0x61,
                0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f,
                0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74
            };
            var message = Read(data);
            Assert.Equal(15, message.Id);
            Assert.Empty(message.Controls);
            var modify = Assert.IsType<LdapAddResponse>(message);
            Assert.Equal(ResultCode.InsufficientAccessRights, modify.ResultCode);
            Assert.Equal(String.Empty, modify.MatchedDN.ToString());
            Assert.Equal("no write access to parent", modify.DiagnosticMessage);
            Assert.Empty(modify.Referrals);
        }

        [Fact]
        public void CanReadModifyDNRequest()
        {
            var data = new byte[]
            {
                //CC-BY 4.0 https://ldap.com/license/ Neil Wilson
                0x30, 0x3c, // Begin the LDAPMessage sequence
                0x02, 0x01, 0x02, // The message ID (integer value 2)
                0x6c, 0x37, // Begin the modify DN request protocol op
                0x04, 0x24, 0x75, 0x69, 0x64, 0x3d, 0x6a, 0x64, 0x6f,
                0x65, // The DN of the entry to rename (octet string
                0x2c, 0x6f, 0x75, 0x3d, 0x50, 0x65, 0x6f, 0x70, // "uid=jdoe,ou=People,dc=example,dc=com")
                0x6c, 0x65, 0x2c, 0x64, 0x63, 0x3d, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2c, 0x64, 0x63, 0x3d,
                0x63, 0x6f, 0x6d, 0x04, 0x0c, 0x75, 0x69, 0x64, 0x3d, 0x6a, 0x6f, 0x68,
                0x6e, // The new RDN (octet string "uid=john.doe")
                0x2e, 0x64, 0x6f, 0x65, 0x01, 0x01, 0xff // Delete the old RDN value (boolean true)
            };
            var message = Read(data);
            Assert.Equal(2, message.Id);
            Assert.Empty(message.Controls);
            var modify = Assert.IsType<LdapModifyDNRequest>(message);
            Assert.Equal("uid=jdoe,ou=People,dc=example,dc=com", modify.Entry.ToString());
            Assert.Equal("uid=john.doe", modify.NewRDN.ToString());
            Assert.True( modify.DeleteOldRDN);
            Assert.Null( modify.NewSuperior);
        }

        [Fact]
        public void CanReadModifyDNResponse()
        {
            var data = new byte[]
            {
                //CC-BY 4.0 https://ldap.com/license/ Neil Wilson
                0x30, 0x0c, // Begin the LDAPMessage sequence
                0x02, 0x01, 0x02, // The message ID (integer value 2)
                0x6d, 0x07, // Begin the modify DN response protocol op
                0x0a, 0x01, 0x00, // success result code (enumerated value 0)
                0x04, 0x00, // No matched DN (0-byte octet string)
                0x04, 0x00 // No diagnostic message (0-byte octet string)
            };
            var message = Read(data);
            Assert.Equal(2, message.Id);
            Assert.Empty(message.Controls);
            var modify = Assert.IsType<LdapModifyDNResponse>(message);
            Assert.Equal(ResultCode.Success, modify.ResultCode);
            Assert.Equal(String.Empty, modify.MatchedDN.ToString());
            Assert.Equal(String.Empty, modify.DiagnosticMessage);
            Assert.Empty(modify.Referrals);
        }

        [Fact]
        public void CanReadCompareRequest()
        {
            var data = new byte[]
            {
                //CC-BY 4.0 https://ldap.com/license/ Neil Wilson
                0x30, 0x45, // Begin the LDAPMessage sequence
                0x02, 0x01, 0x02, // The message ID (integer value 2)
                0x6e, 0x40, // Begin the compare request protocol op
                0x04, 0x24, 0x75, 0x69, 0x64, 0x3d, 0x6a, 0x64, 0x6f, 0x65, // The target entry DN (octet string
                0x2c, 0x6f, 0x75, 0x3d, 0x50, 0x65, 0x6f, 0x70, // "uid=jdoe,ou=People,dc=example,dc=com")
                0x6c, 0x65, 0x2c, 0x64, 0x63, 0x3d, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2c, 0x64, 0x63, 0x3d,
                0x63, 0x6f, 0x6d, 0x30, 0x18, // Begin the attribute value assertion sequence
                0x04, 0x0c, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, // The attribute description (octet string
                0x54, 0x79, 0x70, 0x65, // "employeeType")
                0x04, 0x08, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x69, 0x65,
                0x64 // The assertion value (octet string "salaried")
            };
            var message = Read(data);
            Assert.Equal(2, message.Id);
            Assert.Empty(message.Controls);
            var compare = Assert.IsType<LdapCompareRequest>(message);
            Assert.Equal("uid=jdoe,ou=People,dc=example,dc=com", compare.Entry.ToString());
            Assert.Equal("employeeType", compare.Assertion.Attribute.ToString());
            Assert.Equal("salaried", compare.Assertion.Value);
        }

        [Fact]
        public void CanReadCompareResponse()
        {
            var data = new byte[]
            {
                //CC-BY 4.0 https://ldap.com/license/ Neil Wilson
                0x30, 0x0c, // Begin the LDAPMessage sequence
                0x02, 0x01, 0x02, // The message ID (integer value 2)
                0x6f, 0x07, // Begin the compare response protocol op
                0x0a, 0x01, 0x06, // compareTrue result code (enumerated value 6)
                0x04, 0x00, // No matched DN (0-byte octet string)
                0x04, 0x00, // No diagnostic message (0-byte octet string)
            };
            var message = Read(data);
            Assert.Equal(2, message.Id);
            Assert.Empty(message.Controls);
            var compare = Assert.IsType<LdapCompareResponse>(message);
            Assert.Equal(ResultCode.CompareTrue, compare.ResultCode);
            Assert.Equal(String.Empty, compare.MatchedDN.ToString());
            Assert.Equal(String.Empty, compare.DiagnosticMessage);
        }

        [Fact]
        public void CanReadIntermediateResponse()
        {
            var data = new byte[]
            {
                //CC-BY 4.0 https://ldap.com/license/ Neil Wilson
                0x30, 0x2c, // Begin the LDAPMessage sequence
                0x02, 0x01, 0x02, // The message ID (integer value 2)
                0x79, 0x27, // Begin the intermediate response protocol op
                0x80, 0x18, 0x31, 0x2e, 0x33, 0x2e, 0x36, 0x2e, 0x31, 0x2e, // The responseName (octet string
                0x34, 0x2e, 0x31, 0x2e, 0x34, 0x32, 0x30, 0x33, // "1.3.6.1.4.1.4203.1.9.1.4")
                0x2e, 0x31, 0x2e, 0x39, 0x2e, 0x31, 0x2e, 0x34,
                0x81, 0x0b, // Begin the responseValue element
                0x80, 0x09, 0x4e, 0x6f, 0x6d, 0x4e, 0x6f, 0x6d, 0x4e, 0x6f, // The syncCookie value
                0x6d // (octet string "NomNomNom")
            };
            var message = Read(data);
            Assert.Equal(2, message.Id);
            Assert.Empty(message.Controls);
            var intermediate = Assert.IsType<LdapIntermediateResponse>(message);
            Assert.Equal("1.3.6.1.4.1.4203.1.9.1.4", intermediate.Name);
            Assert.True(intermediate.Value.HasValue);
            Assert.False(intermediate.Value.Value.IsEmpty);
        }

        [Fact]
        public void CanReadAbandonRequest()
        {
            var data = new byte[]
            {
                //CC-BY 4.0 https://ldap.com/license/ Neil Wilson
                0x30, 0x06, // Begin the LDAPMessage sequence
                0x02, 0x01, 0x06, // The message ID (integer value 6)
                0x50, 0x01, 0x05 // The abandon request protocol op (application primitive integer 5)
            };
            var message = Read(data);
            Assert.Equal(6, message.Id);
            Assert.Empty(message.Controls);
            var abandon = Assert.IsType<LdapAbandonRequest>(message);
            Assert.Equal(5, abandon.MessageId);
        }

        [Fact]
        public void CanReadExtendedRequest()
        {
            var data = new byte[]
            {
                //CC-BY 4.0 https://ldap.com/license/ Neil Wilson
                0x30, 0x1d, // Begin the LDAPMessage sequence
                0x02 , 0x01 , 0x01, // The message ID (integer value 1)
                0x77 , 0x18, // Begin the extended request protocol op
                0x80 , 0x16 , 0x31 , 0x2e , 0x33 , 0x2e , 0x36 , 0x2e , 0x31 , 0x2e, // The extended request OID
                0x34 , 0x2e , 0x31 , 0x2e , 0x31 , 0x34 , 0x36 , 0x36, // (octet string "1.3.6.1.4.1.1466.20037"
                0x2e , 0x32 , 0x30 , 0x30 , 0x33 , 0x37,       // with type context-specific primitive zero)
            };
            var message = Read(data);
            Assert.Equal(1, message.Id);
            Assert.Empty(message.Controls);
            var extended = Assert.IsType<LdapExtendedRequest>(message);
            Assert.Equal("1.3.6.1.4.1.1466.20037", extended.Name);
            Assert.False(extended.Value.HasValue);
        }

        [Fact]
        public void CanReadExtendedResponse()
        {
            var data = new byte[]
            {
                //CC-BY 4.0 https://ldap.com/license/ Neil Wilson
                0x30, 0x24, // Begin the LDAPMessage sequence
                0x02, 0x01, 0x01, // The message ID (integer value 1)
                0x78, 0x1f, // Begin the extended response protocol op
                0x0a, 0x01, 0x00, // success result code (enumerated value 0)
                0x04, 0x00, // No matched DN (0-byte octet string)
                0x04, 0x00, // No diagnostic message (0-byte octet string)
                0x8a, 0x16, 0x31, 0x2e, 0x33, 0x2e, 0x36, 0x2e, 0x31, 0x2e, // The extended response OID
                0x34, 0x2e, 0x31, 0x2e, 0x31, 0x34, 0x36, 0x36, // (octet string "1.3.6.1.4.1.1466.20037"
                0x2e, 0x32, 0x30, 0x30, 0x33, 0x37 // with type context-specific primitive zero)
            };
            var message = Read(data);
            Assert.Equal(1, message.Id);
            Assert.Empty(message.Controls);
            var extended = Assert.IsType<LdapExtendedResponse>(message);
            Assert.Equal(ResultCode.Success, extended.ResultCode);
            Assert.Equal(String.Empty, extended.MatchedDN.ToString());
            Assert.Equal(String.Empty, extended.DiagnosticMessage);
            Assert.Empty(extended.Referrals);
            Assert.Equal("1.3.6.1.4.1.1466.20037", extended.Name);
            Assert.False(extended.Value.HasValue);

        }

        private LdapRequestMessage Read(byte[] data, bool validateRoundtrip = true)
        {
            var message = LdapReader.ReadMessage(data);
            if (validateRoundtrip)
            {
                var serialized = LdapReader.WriteMessage(message);
                Assert.Equal(data, serialized);
            }
            return message;
        }
    }
}
